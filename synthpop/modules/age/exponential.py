"""
An exponential age distribution

Stars are assigned ages from an exponential distribution
with a power law index and upper and lower limits.
"""

__all__ = ['Exponential']
__author__ = "J. KlÃ¼ter"
__date__ = "2022-07-06"

import numpy as np
from ._age import Age

class Exponential(Age):
    """
    Exponential age distribution generator
    """

    def __init__(
            self, gamma: float,
            low_bound: float = 1e-4, high_bound: float = 19.9526231497,**kwargs
            ):
        super().__init__(**kwargs)

        #: name for age distribution
        self.age_func_name = 'exponential' 
        #: exponential base value
        self.gamma = gamma 
        #: lower age limit
        self.lower = low_bound
        #: upper age limit
        self.upper = high_bound 

        if self.lower >= self.upper:
            raise ValueError(f"{low_bound = } has to be strictly smaller than {high_bound = }")

    def draw_random_age(self, N: int or None = None, **kwargs) -> np.ndarray or float:
        """
        Returns one or more ages [Gyr] from an exponential distribution.

        Parameters
        ----------
        N : int, None, optional
            if N is set to an integer, an array with N random ages is returned

        Returns
        -------
        val : ndarray, float [Gyr]
            single age or ndarray of N ages in [Gyr]
        """
        F_rand = np.random.uniform(
            np.exp(self.gamma * self.lower) / self.gamma,
            np.exp(self.gamma*self.upper) / self.gamma,
            size=N
            )

        val = np.log(self.gamma * F_rand) / self.gamma

        return val

    def average_age(self) -> float:
        """Return the average age of the population"""
        return ((self.upper - 1/self.gamma) * np.exp(self.gamma*self.upper)
                - (self.lower - 1/self.gamma) * np.exp(self.gamma*self.lower)) \
               / (np.exp(self.gamma*self.upper) - np.exp(self.gamma*self.lower))

    def get_maximum_age(self) -> float:
        """Return the maximum age that can be generated by the distribution."""
        return self.upper
