"""
A Gaussian age distribution

Stars are assigned ages from a Gaussian distribution with
a mean and standard deviation.
"""

__all__ = ['Gaussian']
__author__ = "J. KlÃ¼ter"
__date__ = "2022-07-06"

import numpy as np
from ._age import Age

class Gaussian(Age):
    """
    Gaussian age distrubution generator
    """

    def __init__(
            self, mean: float, std: float,
            low_bound: float = 1e-4, high_bound: float = 19.9526231497, **kwargs
            ):
        super().__init__(**kwargs)

        #: age distribution name
        self.age_func_name = 'gaussian'
        #: mean of the age distribution
        self.mean = mean
        #: standard deviation of the age distribution
        self.std = std
        #: lower age limit
        self.lower = low_bound
        #: upper age limit
        self.upper = high_bound

        if self.lower >= self.upper:
            raise ValueError(f"{low_bound = } has to be strictly smaller than {high_bound = }")

    def draw_random_age(self, N: int or None = None, **kwargs) -> np.ndarray or float:
        """
        Returns one or more metallicities in age [Gyr] from a Gaussian distribution.

        Parameters
        ----------
        N : int, None, optional
            if N is set to an integer, an array with N random ages is returned

        Returns
        -------
        val : ndarray, float [Gyr]
            single age or ndarray of N ages in [Gyr]
        """
        if N is None:
            # generate a single value
            while True:
                val = np.random.normal(self.mean, self.std)
                if self.lower < val < self.upper:
                    return val

        else:
            # generate multiple values
            val = np.random.normal(self.mean, self.std, N)
            while True:
                outside = (self.lower > val) | (val > self.upper)
                if not any(outside):
                    return val
                val[outside] = np.random.normal(self.mean, self.std, sum(outside))

    def average_age(self) -> float:
        """Return the average age of the population"""
        return self.mean

    def get_maximum_age(self) -> float:
        """ Return the maximum age that can be generated by the distribution."""
        return self.upper
